// A mock user database
const users = {
  "user@example.com": {
    name: "John Doe",
    // Mock JWT token (in a real app, this is generated by the server)
    token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiZW1haWwiOiJ1c2VyQGV4YW1wbGUuY29tIiwiaWF0IjoxNTE2MjM5MDIyLCJwaWN0dXJlIjoiaHR0cHM6Ly9pLmliYi5jby8yWmhobllwL2F2YXRhci5wbmcifQ.2Rf-s3XgwB7G2y5v5n3aFGAGdlyv5A5A4V9k2dJBFdM",
  },
};

// A mock OTP
const MOCK_OTP = "123456";

export const requestOtpApi = (email) => {
  console.log(`Requesting OTP for ${email}`);
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve({ success: true, message: "OTP sent successfully!" });
    }, 1000);
  });
};

export const verifyOtpAndLoginApi = (email, otp) => {
  console.log(`Verifying OTP for ${email}`);
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      if (otp !== MOCK_OTP) {
        return reject({ success: false, message: "Invalid OTP" });
      }
      if (users[email]) {
        resolve({ success: true, token: users[email].token });
      } else {
        reject({ success: false, message: "User not found. Please sign up." });
      }
    }, 1500);
  });
};

export const verifyOtpAndSignupApi = (name, email, otp) => {
  console.log(`Verifying OTP for signup: ${name}, ${email}`);
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      if (otp !== MOCK_OTP) {
        return reject({ success: false, message: "Invalid OTP" });
      }
      if (users[email]) {
        return reject({ success: false, message: "User already exists." });
      }
      // Create a new user and token
      const newUserToken = `eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI5ODc2NTQzMjEiLCJuYW1lIjoi${name}IiwiZW1haWwiOiI${email}IiwiaWF0IjoxNTE2MjM5MDIyLCJwaWN0dXJlIjoiaHR0cHM6Ly9pLmliYi5jby8yWmhobllwL2F2YXRhci5wbmcifQ.fake-token-for-${name}`;
      resolve({ success: true, token: newUserToken });
    }, 1500);
  });
};